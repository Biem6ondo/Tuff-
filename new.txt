local gameId = 102276247884041

if game.PlaceId == gameId then

if not _G.hasRunOnce then
    _G.hasRunOnce = true
task.spawn(function() loadstring(game:HttpGet("https://rawscripts.net/raw/Universal-Script-Shiftlock-22314"))() end)

local player = game.Players.LocalPlayer
game:GetService("RunService").Heartbeat:Connect(function()
    local char = player.Character
    local hum = char and char:FindFirstChildOfClass("Humanoid")
    if hum then
        hum:SetStateEnabled(Enum.HumanoidStateType.Climbing, true)
    end
end)

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Window = Rayfield:CreateWindow({
   Name = "DrayvenX / REBORN",
   Icon = 0,
   LoadingTitle = "Wait...",
   LoadingSubtitle = "",
   Theme = "Serenity",
})

local Tab = Window:CreateTab("Info", 0)

Tab:CreateParagraph({Title = "Info", Content = "neoxhackbiem22 or ACE1991ACE\nLast Updated: 2025/7/27"})

local Tab = Window:CreateTab("Main", 10814531047)

local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local ToggleActive = false
local HeartbeatConnection
local BoostConnection

local Spam_Shadow_Abilities = Tab:CreateToggle({
    Name = "Spam Shadow Abilities (Make Everyone Camera Shake and Every Character Can Use It)",
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(Value)
        ToggleActive = Value
        
        if ToggleActive then
            HeartbeatConnection = RunService.Heartbeat:Connect(function()
                for i = 1, 5 do
                    ReplicatedStorage.remotes.abilities:FireServer("boostState", "landed")
                end
            end)

            if workspace:FindFirstChild("boostEffect") then
                task.defer(function()
                    if workspace:FindFirstChild("boostEffect") then
                        workspace.boostEffect:Destroy()
                    end
                end)
            end
            
            BoostConnection = workspace.ChildAdded:Connect(function(child)
                if child.Name == "boostEffect" then
                    task.defer(function()
                        if child.Parent then
                            child:Destroy()
                        end
                    end)
                end
            end)

        else
            if HeartbeatConnection then
                HeartbeatConnection:Disconnect()
                HeartbeatConnection = nil
            end
            
            if BoostConnection then
                BoostConnection:Disconnect()
                BoostConnection = nil
            end
        end
    end,
})

local Players = game:GetService("Players")
local Remotes = game:GetService("ReplicatedStorage"):WaitForChild("remotes"):WaitForChild("abilities")

Tab:CreateButton({
    Name = "Shield All",
    Callback = function()
        for _, player in ipairs(Players:GetPlayers()) do
            if player.Character then
                Remotes:FireServer("shieldShare", player.Character, "fireShield")
            end
        end
    end
})

local RunService = game:GetService("RunService")
local MovementRemote = game:GetService("ReplicatedStorage"):WaitForChild("remotes"):WaitForChild("movement")

local teleportConnection

Tab:CreateToggle({
    Name = "Invisible (You Can Still Hit)",
    CurrentValue = false,
    Callback = function(enabled)
        if enabled then
            teleportConnection = RunService.Heartbeat:Connect(function()
                MovementRemote:FireServer(
                    CFrame.new(9e9, 0, 9e9, 1, 0, 0, 0, 1, 0, 0, 0, 1)
                )
            end)
        else
            if teleportConnection then
                teleportConnection:Disconnect()
                teleportConnection = nil
            end
        end
    end,
})

local Dropdown = Tab:CreateDropdown({
    Name = "Select Character",
    Options = {"amy", "blaze", "cream", "eggman", "knuckles", "metalsonic", "rouge", "sally", "shadow", "silver", "tails", "sonicexe", "tailsdoll", "kolossos"},
    CurrentOption = {"amy"},
    MultipleOptions = false,
    Flag = "Dropdown1",
    Callback = function(Options)
        selectedCharacter = Options[1]
    end,
})

local RS = game:GetService("RunService")
local Remote = game.ReplicatedStorage.remotes.morphs
local morphConn

Tab:CreateToggle({
    Name = "Auto Morph",
    CurrentValue = false,
    Callback = function(v)
        if v then
            morphConn = RS.RenderStepped:Connect(function()
                if selectedCharacter then
                    Remote:FireServer(selectedCharacter)
                end
            end)
        elseif morphConn then
            morphConn:Disconnect()
            morphConn=nil
        end
    end
})

local function createDropdown(tab, name, options)
    return tab:CreateDropdown({
        Name = name,
        Options = options,
        CurrentOption = {"Choose " .. name},
        MultipleOptions = false,
        Flag = "Dropdown_" .. name,
        Callback = function(Options)
            if Options[1] ~= "none" then
                game:GetService("ReplicatedStorage")
                    :WaitForChild("remotes")
                    :WaitForChild("expressions")
                    :FireServer(Options[1])
            end
        end,
    })
end

createDropdown(Tab, "Emotes", {"angry", "glad", "surprised", "sad", "happy", "worried", "confused", "tired", "enraged", "hurt"})
createDropdown(Tab, "Eyes", {"bloodshot", "regularEyes", "removeBloodshot", "scaredEyes"})
createDropdown(Tab, "Wound", {"torsoBlood", "noseWound", "neckWound", "mouthBlood", "headWounds"})

local Players = game:GetService("Players")
local RS = game:GetService("ReplicatedStorage")
local Remotes = RS:WaitForChild("remotes"):WaitForChild("hitReg")
local LP = Players.LocalPlayer
local RunService = game:GetService("RunService")

local attacking = false
local conn
local lastTime = 0
local interval = 1/30

local function getNearestPlayer()
    local nearest, dist = nil, math.huge
    local myChar = LP.Character
    if not (myChar and myChar:FindFirstChild("HumanoidRootPart")) then return nil end
    
    for _,plr in ipairs(Players:GetPlayers()) do
        if plr ~= LP and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
            local d = (plr.Character.HumanoidRootPart.Position - myChar.HumanoidRootPart.Position).Magnitude
            if d < dist then
                dist = d
                nearest = plr
            end
        end
    end
    return nearest
end

local Toggle = Tab:CreateToggle({
    Name = "Big Hitbox",
    CurrentValue = false,
    Flag = "ToggleAutoHit",
    Callback = function(Value)
        attacking = Value
        if attacking then
            conn = RunService.Heartbeat:Connect(function(step)
                if tick() - lastTime >= interval then
                    lastTime = tick()
                    local target = getNearestPlayer()
                    if target and target.Character then
                        Remotes:FireServer(target.Character)
                    end
                end
            end)
        else
            if conn then
                conn:Disconnect()
                conn = nil
            end
        end
    end,
})

local espExeEnabled = false
local espPlayersEnabled = false

local exeTag = "exe"
local highlightMap = {}

local function createHighlight(exeObject, color)
    local existingHighlight = exeObject:FindFirstChildOfClass("Highlight")
    if existingHighlight then
        existingHighlight:Destroy()
    end
    
    local highlight = Instance.new("Highlight")
    highlight.Parent = exeObject
    highlight.FillColor = color
    highlight.FillTransparency = 0.5
    highlight.OutlineTransparency = 0
end

local function onExeAdded(exeObject)
    if exeObject:IsA("Model") and exeObject:FindFirstChild("Humanoid") then
        createHighlight(exeObject, Color3.fromRGB(255, 0, 0))
    end
end

local function setupExeDetector()
    local exeCollectionService = game:GetService("CollectionService")
    
    for _, exeObject in pairs(exeCollectionService:GetTagged(exeTag)) do
        onExeAdded(exeObject)
    end

    exeCollectionService:GetInstanceAddedSignal(exeTag):Connect(onExeAdded)
end

local function toggleExeEsp(state)
    if state then
        setupExeDetector()
    else
        for _, exeObject in pairs(game:GetService("CollectionService"):GetTagged(exeTag)) do
            local existingHighlight = exeObject:FindFirstChildOfClass("Highlight")
            if existingHighlight then
                existingHighlight:Destroy()
            end
        end
    end
end

local characterColors = {
    tails = Color3.fromRGB(255, 165, 0),
    knuckles = Color3.fromRGB(255, 0, 0),
    eggman = Color3.fromRGB(255, 255, 0),
    amy = Color3.fromRGB(255, 105, 180),
    cream = Color3.fromRGB(255, 218, 185),
    sally = Color3.fromRGB(210, 180, 140),
    shadow = Color3.fromRGB(0, 0, 0),
    rouge = Color3.fromRGB(255, 255, 255),
    blaze = Color3.fromRGB(128, 0, 128),
    silver = Color3.fromRGB(192, 192, 192),
    metalsonic = Color3.fromRGB(0, 0, 255),
    kolossos = Color3.fromRGB(139, 0, 0),
    sonicexe = Color3.fromRGB(139, 0, 0),
}

local function loopThroughDisplayPlayers()
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local displayPlayersFolder = ReplicatedStorage:FindFirstChild("displayPlayers")
    if not displayPlayersFolder then return end

    for modelName, highlight in pairs(highlightMap) do
        if not displayPlayersFolder:FindFirstChild(modelName) then
            highlight:Destroy()
            highlightMap[modelName] = nil
        end
    end

    for _, child in pairs(displayPlayersFolder:GetChildren()) do
        local stats = child:FindFirstChild("stats")
        if stats and stats:FindFirstChild("character") then
            local givenCharacter = stats.character.Value:lower()
            local color = characterColors[givenCharacter]

            if color then
                local model = workspace:FindFirstChild(child.Name)
                if model and model:IsA("Model") then
                    if not highlightMap[model.Name] then
                        local highlight = Instance.new("Highlight")
                        highlight.FillColor = color
                        highlight.FillTransparency = 0.3
                        highlight.OutlineColor = color
                        highlight.OutlineTransparency = 0.2
                        highlight.Enabled = true
                        highlight.Adornee = model
                        highlight.Parent = workspace
                        highlightMap[model.Name] = highlight
                    else
                        local highlight = highlightMap[model.Name]
                        highlight.FillColor = color
                        highlight.OutlineColor = color
                    end
                end
            end
        end
    end
end

local function togglePlayersEsp(state)
    if state then
        espPlayersEnabled = true
        while espPlayersEnabled do
            loopThroughDisplayPlayers()
            task.wait(1)
        end
    else
        espPlayersEnabled = false
        for _, highlight in pairs(highlightMap) do
            highlight:Destroy()
        end
        highlightMap = {}
    end
end

local ToggleExe = Tab:CreateToggle({
    Name = "ESP Exe",
    CurrentValue = false,
    Flag = "ToggleExe",
    Callback = function(Value)
        espExeEnabled = Value
        toggleExeEsp(espExeEnabled)
    end,
})

local TogglePlayers = Tab:CreateToggle({
    Name = "ESP Survivor",
    CurrentValue = false,
    Flag = "TogglePlayers",
    Callback = function(Value)
        espPlayersEnabled = Value
        togglePlayersEsp(espPlayersEnabled)
    end,
})

local Tab = Window:CreateTab("Teleport", 6723742952)
local tps = {
    {"Teleport to Lobby", Vector3.new(0, 10, 0)},
    {"Teleport to Game (Can fall the void)", Vector3.new(-272, 155, -313)},
    {"Teleport to Selecting Box", Vector3.new(0, 4, -80)},
    {"Teleport to Selecting Intro", Vector3.new(-174, 2, 114)},
}

for _, v in ipairs(tps) do
    Tab:CreateButton({
        Name = v[1],
        Callback = function()
            local char = game.Players.LocalPlayer.Character
            if char and char:FindFirstChild("HumanoidRootPart") then
                char.HumanoidRootPart.CFrame = CFrame.new(v[2])
            end
        end
    })
end

local Tab = Window:CreateTab("Head", 0)

local RS = game:GetService("RunService")
local Remote = game.ReplicatedStorage.remotes.headRotation
local headConn

Tab:CreateToggle({
    Name = "Headless",
    CurrentValue = false,
    Callback = function(v)
        if v then
            headConn = RS.Heartbeat:Connect(function()
                for i=1,10 do
                    Remote:FireServer(CFrame.new(math.huge,math.huge,math.huge))
                end
            end)
        elseif headConn then
            headConn:Disconnect()
            headConn=nil
        end
    end
})

local RS = game:GetService("RunService")
local Remote = game.ReplicatedStorage.remotes.headRotation
local Player = game.Players.LocalPlayer
local headRotConn

local function getHeadMotor()
    local char = Player.Character or Player.CharacterAdded:Wait()
    local torso = char:FindFirstChild("torso")
    local main = torso and torso:FindFirstChild("main")
    return main and main:FindFirstChild("head")
end

local function updateHeadRotation()
    local headMotor = getHeadMotor()
    if headMotor and headMotor:IsA("Motor6D") then
        local c0 = headMotor.C0.Position
        Remote:FireServer(CFrame.new(c0) * CFrame.Angles(0, math.rad(180), 0))
    end
end

Player.CharacterAdded:Connect(function()
    Player.Character:WaitForChild("torso", 5)
    task.wait(1)
    if headRotConn then updateHeadRotation() end
end)

Tab:CreateToggle({
    Name = "180° Head Rotation",
    CurrentValue = false,
    Callback = function(v)
        if v then
            updateHeadRotation()
            headRotConn = RS.Heartbeat:Connect(function()
                for i = 1, 10 do updateHeadRotation() end
            end)
        elseif headRotConn then
            headRotConn:Disconnect()
            headRotConn=nil
        end
    end
})

local Tab = Window:CreateTab("Survivor", 135443303437470)

Tab:CreateSection("Main")

local RS = game:GetService("RunService")
local player = game.Players.LocalPlayer
local lastExit
local autoEscapeConn
local cooldown = 0

local function findExit()
    local map = workspace:FindFirstChild("game") and workspace.game:FindFirstChild("currentMap")
    if not map then return end

    for _, obj in ipairs(map:GetDescendants()) do
        if obj:IsA("Model") and obj.Name == "exitRing" and obj.PrimaryPart then
            return obj.PrimaryPart
        end
    end

    local function checkExits(path)
        local exits = path and path:FindFirstChild("default") and path.default:FindFirstChild("exits")
        if exits then
            for _, obj in ipairs(exits:GetChildren()) do
                if obj:IsA("Part") and (obj.Name == "1" or obj.Name == "2" or obj.Name == "3" or obj.Name == "4") and obj:FindFirstChildOfClass("TouchTransmitter") then
                    return obj
                end
            end
        end
    end

    return checkExits(map:FindFirstChild("you can't run")) or checkExits(map:FindFirstChild("base"))
end

Tab:CreateToggle({
    Name = "Auto Escape (From Original, may be not work)",
    CurrentValue = false,
    Callback = function(v)
        if v then
            autoEscapeConn = RS.Heartbeat:Connect(function(dt)
                cooldown += dt
                if cooldown >= 0.5 then
                    cooldown = 0
                    local char = player.Character
                    local hrp = char and char:FindFirstChild("HumanoidRootPart")
                    if hrp then
                        local exit = findExit()
                        if exit and exit ~= lastExit then
                            lastExit = exit
                            hrp.CFrame = exit.CFrame
                        end
                    end
                end
            end)
        elseif autoEscapeConn then
            autoEscapeConn:Disconnect()
            autoEscapeConn = nil
        end
    end
})

Tab:CreateButton({
    Name = "Be Minion Right now",
    Callback = function()
        local player = game:GetService("Players").LocalPlayer
        local rs = game:GetService("ReplicatedStorage")
        local ss = game:GetService("SoundService")
        local running = true

        local function getGUI()
            return player:FindFirstChild("PlayerGui")
        end

        local function getHUD()
            local gui = getGUI()
            return gui and gui:FindFirstChild("gui") and gui.gui:FindFirstChild("hud")
        end

        local function disableSpectate()
            local hud = getHUD()
            if hud then
                if hud:FindFirstChild("spectate") then
                    hud.spectate.Visible = false
                end
                if hud:FindFirstChild("healthbars") and not hud.healthbars.Visible then
                    hud.healthbars.Visible = true
                end
            end
        end

        player.CharacterAdded:Connect(function()
            running = false
        end)

        task.spawn(function()
            while running do
                local success, _ = pcall(disableSpectate)
                if not success then
                    running = false
                end
                task.wait(0.1)
            end
        end)

        rs.remotes.actions:FireServer("drown")
        rs.remotes.infect:FireServer()
        task.wait(1.3)

        local gui = getGUI()
        if gui then
            gui.stats:SetAttribute("isDead", false)
            task.wait(5)
            local hud = getHUD()
            if hud and hud:FindFirstChild("continue") then
                hud.continue.Visible = false
            end
        end

        wait(5)
        ss.mainSounds.current.SoundId = "rbxassetid://133273560899979"
    end,
})

local Section = Tab:CreateSection("Did it Work?")

local RS = game:GetService("RunService")
local Remote = game.ReplicatedStorage.remotes.abilities
local blazeConn

Tab:CreateToggle({
    Name = "Lag Everyone (Blaze)",
    CurrentValue = false,
    Callback = function(v)
        if v then
            blazeConn = RS.Heartbeat:Connect(function()
                for i=1,5 do
                    Remote:FireServer("setHeatWaveParticles","punch")
                end
                local char = game.Players.LocalPlayer.Character
                local arm = char and char:FindFirstChild("arm1")
                local hand = arm and arm:FindFirstChild("hand")
                local hand2 = hand and hand:FindFirstChild("hand")
                if hand2 then hand2:Destroy() end
            end)
        elseif blazeConn then
            blazeConn:Disconnect()
            blazeConn=nil
        end
    end
})

local Tab = Window:CreateTab("Sonic.exe and minion", 73545495297148)

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local abilitiesRemote = ReplicatedStorage:WaitForChild("remotes"):WaitForChild("abilities")

local localPlayer = Players.LocalPlayer
local toggleState = false
local selectedTargets = {"All"}
local highlights = {}
local rainbowSpeed = 2

local function getPlayerList()
    local list = {"All"}
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= localPlayer then
            table.insert(list, player.Name)
        end
    end
    return list
end

local Dropdown = Tab:CreateDropdown({
    Name = "Choose Target",
    Options = getPlayerList(),
    CurrentOption = {"All"},
    MultipleOptions = true,
    Flag = "MultiPlayerTarget",
    Callback = function(option)
        selectedTargets = option
    end,
})

Players.PlayerAdded:Connect(function()
    Dropdown:Refresh(getPlayerList())
end)

Players.PlayerRemoving:Connect(function(player)
    Dropdown:Refresh(getPlayerList())
    if highlights[player] then
        highlights[player]:Destroy()
        highlights[player] = nil
    end
end)

Tab:CreateToggle({
    Name = "Kolossos (Make Target Has CameraShake / Not Work Players Disabled CameraShake)",
    CurrentValue = false,
    Flag = "ToggleChargeImpact",
    Callback = function(value)
        toggleState = value
        if not value then
            for _, hl in pairs(highlights) do
                hl:Destroy()
            end
            highlights = {}
        end
    end,
})

local function createHighlight(player)
    if highlights[player] then return end
    local highlight = Instance.new("Highlight")
    highlight.Name = "TargetRainbow"
    highlight.FillTransparency = 1
    highlight.OutlineTransparency = 0
    highlight.OutlineColor = Color3.new(1, 0, 0)
    highlight.Adornee = player.Character
    highlight.Parent = player.Character
    highlights[player] = highlight
end

local function removeHighlight(player)
    if highlights[player] then
        highlights[player]:Destroy()
        highlights[player] = nil
    end
end

RunService.Heartbeat:Connect(function()
    if not toggleState then return end

    local isAllSelected = table.find(selectedTargets, "All") ~= nil
    local hue = tick() * rainbowSpeed % 1
    local color = Color3.fromHSV(hue, 1, 1)

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= localPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local shouldAffect = isAllSelected or table.find(selectedTargets, player.Name)
            if shouldAffect then
                local hrp = player.Character.HumanoidRootPart
                abilitiesRemote:FireServer("chargeImpact", hrp.Position, hrp, true)
                createHighlight(player)
                if highlights[player] then
                    highlights[player].OutlineColor = color
                end
            else
                removeHighlight(player)
            end
        end
    end
end)

local Tab = Window:CreateTab("Client", 9405930424)

local Input = Tab:CreateInput({
   Name = "Set your health",
   CurrentValue = "",
   PlaceholderText = "Data",
   Flag = "Input1", 
   Callback = function(setdata)
local playerName = game.Players.LocalPlayer.Name
local newHealthValue = setdata

local replicatedStorage = game:GetService("ReplicatedStorage")
local displayPlayers = replicatedStorage:FindFirstChild("displayPlayers")

if displayPlayers then
    local playerData = displayPlayers:FindFirstChild(playerName)
    if playerData and playerData:FindFirstChild("health") then
        playerData.health.Value = newHealthValue
    end
end
   end,
})
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local SkyboxesFolder = ReplicatedStorage:WaitForChild("skyboxes")
local Skyboxes = {}

for _, skybox in ipairs(SkyboxesFolder:GetChildren()) do
    if skybox:IsA("Sky") then
        table.insert(Skyboxes, skybox.Name)
    end
end

local Dropdown = Tab:CreateDropdown({
   Name = "Choose SkyBox",
   Options = Skyboxes,
   CurrentOption = {Skyboxes[1]},
   MultipleOptions = false,
   Flag = "DropdownSkyBox",
   Callback = function(Options)
       for _, skybox in ipairs(SkyboxesFolder:GetChildren()) do
           if skybox.Name == Options[1] then
               local newSky = skybox:Clone()
               newSky.Parent = game.Lighting
               for _, child in ipairs(game.Lighting:GetChildren()) do
                   if child:IsA("Sky") and child ~= newSky then
                       child:Destroy()
                   end
               end
           end
       end
   end,
})

Tab:CreateButton({
Name = "No fog",
Callback = function()
game:GetService("RunService").Heartbeat:Connect(function()
    game.Lighting.atmosphere.Density = 0
    game.Lighting.blur.Enabled = false
    game.Lighting.bloom.Enabled = false
    game.Lighting.colorCorrection.Enabled = false
    game:GetService("Lighting").depthOfField.Enabled = false
    game:GetService("Lighting").sunRays.Enabled = false
    game:GetService("Lighting").Brightness = 2
    game:GetService("Lighting").Ambient = Color3.new(1, 1, 1)

    local Cam = workspace:FindFirstChild("Camera")
    if Cam then
        local as = Cam:FindFirstChild("ashes")
        local ra = Cam:FindFirstChild("rain")
        if as then
            as:Destroy()
        end
        if ra then
            ra:Destroy()
        end
    end
end)
end,
})

local Dropdown = Tab:CreateDropdown({
   Name = "Game Mode",
   Options = {"", "teamVsTeam", "doubleTrouble"},
   CurrentOption = "",
   MultipleOptions = false,
   Flag = "erly",
   Callback = function(optn)
       local selected = tostring(optn[1] or "")
       local settingsDisplay = game.ReplicatedStorage:FindFirstChild("settingsDisplay")
       if settingsDisplay then
           local gamemode = settingsDisplay:FindFirstChild("gamemode")
           if gamemode and gamemode:IsA("StringValue") then
               gamemode.Value = selected
           end
       end
   end,
})

local Tab = Window:CreateTab("Beta", 88065516251752)

local player = game.Players.LocalPlayer
local defaultSpeed = 16
local runSpeed = 35
local currentAnimation

local screenGui = Instance.new("ScreenGui", game.CoreGui)
local button = Instance.new("TextButton", screenGui)

button.Size = UDim2.new(0, 100, 0, 50)
button.Position = UDim2.new(0.5, -50, 0.1, 0)
button.Text = "Run"
button.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
button.Draggable = true
button.Active = true
button.Visible = false

local function stopCurrentAnimation(humanoid)
    if currentAnimation then
        currentAnimation:Stop()
        currentAnimation = nil
    end
end

local function setupCharacter(char)
    local humanoid = char:FindFirstChildOfClass("Humanoid")
    local rootPart = char:FindFirstChild("HumanoidRootPart")

    if humanoid and rootPart then
        stopCurrentAnimation(humanoid)

        local selection = workspace.game.selectionIntro.positions.survivors
        local targetPos

        for i = 1, 7 do
            local part = selection:FindFirstChild("player" .. i)
            if part and #part:GetChildren() == 0 then
                targetPos = part.Position
                break
            end
        end

        if targetPos then
            rootPart.CFrame = CFrame.new(targetPos.X, 2, 113)
            humanoid.WalkSpeed = runSpeed

            local animRun = Instance.new("Animation")
            animRun.AnimationId = "rbxassetid://76389912099262"
            currentAnimation = humanoid:LoadAnimation(animRun)
            currentAnimation:Play()

            humanoid:MoveTo(targetPos)

            humanoid.MoveToFinished:Connect(function()
                stopCurrentAnimation(humanoid)
                local animIdle = Instance.new("Animation")
                animIdle.AnimationId = "rbxassetid://114478970530288"
                currentAnimation = humanoid:LoadAnimation(animIdle)
                currentAnimation:Play()
                humanoid.WalkSpeed = defaultSpeed
            end)
        end
    end
end

button.MouseButton1Click:Connect(function()
    if player.Character then
        setupCharacter(player.Character)
    end
end)

local part = Instance.new("Part", workspace)
part.Size = Vector3.new(13, 408, 133)
part.Position = Vector3.new(-187.25, -7.018, -39.75)
part.Transparency = 1
part.CanCollide = true
part.Anchored = true
part.Rotation = Vector3.new(90, 90, 0)

Tab:CreateToggle({
Name = "Show Me On SelectionIntro",
CurrentValue = false,
Flag = "hhhhhhh",
Callback = function(Value)
button.Visible = Value
end,
})

local Tab = Window:CreateTab("Universal", 0)

Tab:CreateButton({
Name = "Infinite Yield",
Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"))()
end,
})

Tab:CreateButton({
Name = "Animation Scanner",
Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/Biem6ondo/Test/refs/heads/main/Testing"))()
end,
})

local Tab = Window:CreateTab("Misc", 18683003750)

Tab:CreateButton({
Name = "Anti Dead Or Stun (Fixed!)",
Callback = function()
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:FindFirstChildWhichIsA("Humanoid")
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local runService = game:GetService("RunService")
local userInputService = game:GetService("UserInputService")

local speed = 2.9
local tpwalking = true
local gravitySpeed = 0.5
local anchoredState = false
local gravityEnabled = true
local jumpEnabled = true
local tpwalkEnabled = true

local function isOnGround()
    local rayOrigin = humanoidRootPart.Position
    local rayDirection = Vector3.new(0, -3.5, 0)
    local raycastParams = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {character}
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
    local raycastResult = workspace:Raycast(rayOrigin, rayDirection, raycastParams)  
    return raycastResult ~= nil
end

local function jumpCharacter()
    if jumpEnabled and humanoid and humanoidRootPart then
        character:TranslateBy(Vector3.new(0, 15, 0))
        task.wait(0.2)
        while gravityEnabled and not isOnGround() do  
            character:TranslateBy(Vector3.new(0, -gravitySpeed, 0))  
            task.wait(0.02)  
        end  
    end
end

local gui = Instance.new("ScreenGui", player.PlayerGui)
gui.ResetOnSpawn = true

local speedLabel = Instance.new("TextLabel", gui)
speedLabel.Size = UDim2.new(0, 200, 0, 50)
speedLabel.Position = UDim2.new(0.5, -100, 0.1, 0)
speedLabel.BackgroundTransparency = 0.5
speedLabel.TextScaled = true
speedLabel.Visible = false
speedLabel.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
speedLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
speedLabel.Font = Enum.Font.SourceSansBold

local function toggleAnchoredState()
    anchoredState = not anchoredState
    humanoidRootPart.Anchored = anchoredState
    gravityEnabled = anchoredState
    jumpEnabled = anchoredState
    tpwalkEnabled = anchoredState
    print(anchoredState and "HumanoidRootPart Anchored: ON" or "HumanoidRootPart Anchored: OFF")
end

if userInputService.TouchEnabled then
    print("You are mobile")

    local speedBox = Instance.new("TextBox", gui)
    speedBox.Size = UDim2.new(0, 200, 0, 50)
    speedBox.Position = UDim2.new(0.5, 0, 0, 0)
    speedBox.PlaceholderText = "Enter Speed"
    speedBox.Text = "2.9"
    speedBox.ClearTextOnFocus = true
    speedBox.BackgroundTransparency = 0.3
    speedBox.BorderSizePixel = 0
    speedBox.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    speedBox.TextColor3 = Color3.fromRGB(255, 255, 255)
    speedBox.Font = Enum.Font.SourceSansBold
speedBox.AnchorPoint = Vector2.new(0.5, 0.5)

    local corner = Instance.new("UICorner", speedBox)
    corner.CornerRadius = UDim.new(0, 10)

    local applyBtn = Instance.new("TextButton", gui)
    applyBtn.Size = UDim2.new(0, 200, 0, 50)
    applyBtn.Position = UDim2.new(0.5, 0, 0.08, 0)
    applyBtn.Text = "Apply Speed"
    applyBtn.BackgroundTransparency = 0.3
    applyBtn.BorderSizePixel = 0
    applyBtn.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    applyBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
    applyBtn.Font = Enum.Font.SourceSansBold
applyBtn.TextScaled = true
applyBtn.AnchorPoint = Vector2.new(0.5, 0.5)

    local corner2 = Instance.new("UICorner", applyBtn)
    corner2.CornerRadius = UDim.new(0, 10)

    applyBtn.MouseButton1Click:Connect(function()
        local newSpeed = tonumber(speedBox.Text)
        if newSpeed and newSpeed > 0 then
            speed = newSpeed
            speedLabel.Text = "Speed: " .. speed
            speedLabel.Visible = true
            task.wait(1)
            speedLabel.Visible = false
        end
    end)

    local toggleBtn = Instance.new("TextButton", gui)
    toggleBtn.Size = UDim2.new(0, 200, 0, 50)
    toggleBtn.Position = UDim2.new(0, 0, 0.4, 0)
    toggleBtn.Text = "Disabled"
    toggleBtn.BackgroundTransparency = 0.3
    toggleBtn.BorderSizePixel = 0
    toggleBtn.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    toggleBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
    toggleBtn.Font = Enum.Font.SourceSansBold
toggleBtn.TextScaled = true

    local corner3 = Instance.new("UICorner", toggleBtn)
    corner3.CornerRadius = UDim.new(0, 10)

    toggleBtn.MouseButton1Click:Connect(function()
        toggleAnchoredState()
        toggleBtn.Text = anchoredState and "Enabled" or "Disabled"
    end)

    local jumpBtn = player.PlayerGui.TouchGui.TouchControlFrame:FindFirstChild("JumpButton")
    if jumpBtn then
        jumpBtn.MouseButton1Click:Connect(jumpCharacter)
    end
else
    print("You are computer")

    game.StarterGui:SetCore("SendNotification", {
        Title = "Speed Control",
        Text = "Press V + Scroll (Down, Up) to (Decrease, Increase) Speed and V to Toggle",
        Duration = 5
    })

    userInputService.InputChanged:Connect(function(input)
        if userInputService:IsKeyDown(Enum.KeyCode.V) and (input.UserInputType == Enum.UserInputType.MouseWheel) then
            if input.Position.Z > 0 then
                speed = math.min(speed + 1, 100)
            else
                speed = math.max(speed - 1, 1)
            end

            speedLabel.Text = "Speed: " .. speed
            speedLabel.Visible = true

            task.wait(1)
            speedLabel.Visible = false
        end
    end)

    userInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed then
            if input.KeyCode == Enum.KeyCode.V then
                toggleAnchoredState()
            elseif input.KeyCode == Enum.KeyCode.Space then
                jumpCharacter()
            end
        end
    end)
end

runService.Heartbeat:Connect(function(delta)
    if tpwalkEnabled and tpwalking and humanoid and humanoid.MoveDirection.Magnitude > 0 then
        local direction = humanoid.MoveDirection.Unit
        local moveDistance = speed * delta * 10
        local rootPos = humanoidRootPart.Position

        local raycastParams = RaycastParams.new()
        raycastParams.FilterDescendantsInstances = {character}
        raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

        local offsets = {
            Vector3.new(0, 0, 0),
            Vector3.new(2, 0, 0),
            Vector3.new(-2, 0, 0)
        }

        local hitFront = false
        for _, offset in ipairs(offsets) do
            local origin = rootPos + offset
            local frontRay = workspace:Raycast(origin, direction * (moveDistance + 1), raycastParams)
            if frontRay then
                hitFront = true
                break
            end
        end

        if not hitFront then
            character:TranslateBy(direction * moveDistance)
        else
            local heightCheck = 2.75
            local clearAbove = true

            for _, offset in ipairs(offsets) do
                local origin = rootPos + offset + Vector3.new(0, heightCheck, 0)
                local upRay = workspace:Raycast(origin, direction * (moveDistance + 1), raycastParams)
                if upRay then
                    clearAbove = false
                    break
                end
            end

            if clearAbove then
                character:TranslateBy(Vector3.new(0, 4.5, 0))
                character:TranslateBy(direction * moveDistance)
            end
        end

        local bottomOrigin = rootPos
        local downRay = workspace:Raycast(bottomOrigin, Vector3.new(0, -3, 0), raycastParams)

        if downRay and downRay.Position.Y > rootPos.Y - 2 then
        
            character:TranslateBy(Vector3.new(0, 4, 0))
        end
    end
end)

runService.RenderStepped:Connect(function()
    if gravityEnabled and not isOnGround() then
        humanoidRootPart.CFrame = humanoidRootPart.CFrame * CFrame.new(0, -gravitySpeed, 0)
    end
end)

-- Tip

local tips = {
    "Tip: You should move and press the Toggle button at the same time for the Animation to run normally.",
    "Tip: Recommended speed: 2.9/3",
    "Tip: Need enabled shiftlock (Mobile)",
    "Tip: Enable shiftlock on PC will be added later!"
}

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local PlayerGui = player:WaitForChild("PlayerGui")

local gui = Instance.new("ScreenGui", PlayerGui)
gui.Name = "CoolTipGui"

local frame = Instance.new("Frame", gui)
frame.AnchorPoint = Vector2.new(0.5, 1)
frame.Position = UDim2.new(0.5, 0, 1, -20)
frame.Size = UDim2.new(0.8, 0, 0, 40)
frame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
frame.BackgroundTransparency = 1
frame.BorderSizePixel = 0
frame.ClipsDescendants = true
frame.Visible = true
frame.ZIndex = 10

local uicorner = Instance.new("UICorner", frame)
uicorner.CornerRadius = UDim.new(0, 8)

local label = Instance.new("TextLabel", frame)
label.Size = UDim2.new(1, -10, 1, 0)
label.Position = UDim2.new(0, 5, 0, 0)
label.BackgroundTransparency = 1
label.TextColor3 = Color3.fromRGB(255, 0, 0)
label.TextSize = 18
label.Font = Enum.Font.GothamSemibold
label.Text = ""
label.TextTransparency = 0.3
label.ZIndex = 1

local function showTip(text)
    label.Text = text
    label.TextTransparency = 1
    for i = 1, 10 do
        label.TextTransparency = 1 - (i * 0.1)
        task.wait(0.05)
    end
end

task.spawn(function()
    local i = 1
    while true do
        showTip(tips[i])
        i += 1
        if i > #tips then i = 1 end
        task.wait(5)
    end
end)
end,
})

local player = game.Players.LocalPlayer

local toggleState = false
local Toggle = Tab:CreateToggle({
    Name = "Can Climb",
    CurrentValue = false,
    Flag = "Toggle_Ladder",
    Callback = function(Value)
        toggleState = Value

        local currentMap = game.Workspace:FindFirstChild("game") and game.Workspace.game:FindFirstChild("currentMap")
        if not currentMap then return end

        for _, part in ipairs(currentMap:GetDescendants()) do
            if part:IsA("BasePart") and part.Name == "ladder" then
                part.Transparency = toggleState and 0 or 1
                part.CanCollide = toggleState
            end
        end
    end,
})

local RS = game:GetService("RunService")
local LP = game.Players.LocalPlayer
local displayPlayers = game.ReplicatedStorage:WaitForChild("displayPlayers")
local noCDConn

Tab:CreateToggle({
    Name = "Client Abilities No Countdown",
    CurrentValue = false,
    Callback = function(v)
        if v then
            noCDConn = RS.Heartbeat:Connect(function()
                local plrData = displayPlayers:FindFirstChild(LP.Name)
                local cooldowns = plrData and plrData:FindFirstChild("cooldowns")
                if cooldowns then
                    for _, child in ipairs(cooldowns:GetChildren()) do
                        if child:IsA("NumberValue") then
                            child:Destroy()
                        end
                    end
                end
            end)
        elseif noCDConn then
            noCDConn:Disconnect()
            noCDConn=nil
        end
    end
})

Tab:CreateButton({
Name = "Jump No Delay",
Callback = function()
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
local UserInputService = game:GetService("UserInputService")
local jumping = false

local function isGrounded()
    local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        return humanoid:GetState() == Enum.HumanoidStateType.Running or humanoid:GetState() == Enum.HumanoidStateType.Landed
    end
    return false
end

local function jump()
    if isGrounded() then
        LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
    end
end

local function startJumping()
    jumping = true
    while jumping do
        jump()
        task.wait()
    end
end

local function stopJumping()
    jumping = false
end

local function removeJumpButton()
    local touchGui = PlayerGui:FindFirstChild("TouchGui")
    if touchGui then
        local touchControlFrame = touchGui:FindFirstChild("TouchControlFrame")
        if touchControlFrame then
            local jumpButton = touchControlFrame:FindFirstChild("JumpButton")
            if jumpButton then
                jumpButton:Destroy()
            end
        end
    end
end

local function createJumpButton()
    local touchGui = PlayerGui:FindFirstChild("TouchGui")
    if touchGui then
        local touchControlFrame = touchGui:FindFirstChild("TouchControlFrame")
        if touchControlFrame then
            local jumpButton = Instance.new("ImageButton")
            jumpButton.Name = "JumpButton"
            jumpButton.Size = UDim2.new(0, 120, 0, 120)
            jumpButton.Position = UDim2.new(1, -150, 1, -150)
            jumpButton.Parent = touchControlFrame
            jumpButton.BackgroundColor3 = Color3.new(0, 0, 0)
            jumpButton.MouseButton1Down:Connect(startJumping)
            jumpButton.MouseButton1Up:Connect(stopJumping)
        end
    end
end

UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
    if gameProcessedEvent then return end
    if input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode == Enum.KeyCode.Space then
        startJumping()
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode == Enum.KeyCode.Space then
        stopJumping()
    end
end)

removeJumpButton()
createJumpButton()
end,
})

local idtwo = false

local Toggle = Tab:CreateToggle({
    Name = "Hitbox mode",
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(Value)
        idtwo = Value
        if not idtwo then
            for _, v in pairs(workspace:GetDescendants()) do
                if v:IsA("BasePart") and v.Name == "hitbox" then
                    v.Transparency = 1
                end
            end
        else
            task.spawn(function()
                while idtwo do
                    for _, v in pairs(workspace:GetDescendants()) do
                        if v:IsA("BasePart") and v.Name == "hitbox" then
                            v.Transparency = 0.5
                        end
                    end
                    wait(2)
                end
            end)
        end
    end
})

local hitboxSizes = {}

for _, v in pairs(workspace:GetDescendants()) do
    if v:IsA("BasePart") and v.Name == "hitbox" then
        hitboxSizes[v] = v.Size
    end
end

Tab:CreateButton({
Name = "+5 Hitbox",
Callback = function()
for _, v in pairs(workspace:GetDescendants()) do
if v:IsA("BasePart") and v.Name == "hitbox" then
v.Size = v.Size + Vector3.new(5, 5, 5)
end
end
end,
})

Tab:CreateButton({
Name = "-5 Hitbox",
Callback = function()
for _, v in pairs(workspace:GetDescendants()) do
if v:IsA("BasePart") and v.Name == "hitbox" then
v.Size = v.Size - Vector3.new(5, 5, 5)
end
end
end,
})

Tab:CreateButton({
Name = "View Players Setting",
Callback = function()

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local screenGui = Instance.new("ScreenGui")
screenGui.Parent = game.CoreGui

local frame = Instance.new("Frame")
frame.Size = UDim2.new(0.3, 0, 0.5, 0)
frame.Position = UDim2.new(0.35, 0, 0.25, 0)
frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
frame.Parent = screenGui
frame.Active = true
frame.Draggable = true

local closeButton = Instance.new("TextButton")
closeButton.Size = UDim2.new(0, 30, 0, 30)
closeButton.Position = UDim2.new(1, -35, 0, 5)
closeButton.Text = "X"
closeButton.BackgroundColor3 = Color3.fromRGB(200, 0, 0)
closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
closeButton.Parent = frame
closeButton.MouseButton1Click:Connect(function()
    screenGui:Destroy()
end)

local scrollFrame = Instance.new("ScrollingFrame")
scrollFrame.Size = UDim2.new(1, -10, 1, -40)
scrollFrame.Position = UDim2.new(0, 5, 0, 35)
scrollFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
scrollFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
scrollFrame.ScrollBarThickness = 5
scrollFrame.Parent = frame

local listLayout = Instance.new("UIListLayout")
listLayout.Parent = scrollFrame
listLayout.SortOrder = Enum.SortOrder.LayoutOrder

local function updateStats()
    for _, child in pairs(scrollFrame:GetChildren()) do
        if child:IsA("TextLabel") then
            child:Destroy()
        end
    end
    
    local statsFolder = ReplicatedStorage:FindFirstChild("displayStats")
    if not statsFolder then return end
    
    for _, playerFolder in pairs(statsFolder:GetChildren()) do
        if playerFolder:IsA("Folder") and playerFolder:FindFirstChild("settings") then
            local playerName = playerFolder.Name
            local settingsFolder = playerFolder:FindFirstChild("settings")
            
            local title = Instance.new("TextLabel")
            title.Size = UDim2.new(1, -10, 0, 25)
            title.Text = "* Player: " .. playerName
            title.TextColor3 = Color3.fromRGB(255, 255, 255)
            title.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
            title.Parent = scrollFrame
            
            for _, setting in pairs(settingsFolder:GetChildren()) do
                if setting:IsA("NumberValue") or setting:IsA("BoolValue") or setting:IsA("StringValue") then
                    local valueText = setting.Value
                    if setting:IsA("BoolValue") then
                        valueText = valueText and "Enable" or "Disabled"
                    end
                    
                    local settingLabel = Instance.new("TextLabel")
                    settingLabel.Size = UDim2.new(1, -10, 0, 25)
                    settingLabel.Text = setting.Name .. ": " .. tostring(valueText)
                    settingLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
                    settingLabel.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
                    settingLabel.Parent = scrollFrame
settingLabel.BorderSizePixel = 0
                end
            end
        end
    end
    
    scrollFrame.CanvasSize = UDim2.new(0, 0, 0, listLayout.AbsoluteContentSize.Y)
end

listLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
    scrollFrame.CanvasSize = UDim2.new(0, 0, 0, listLayout.AbsoluteContentSize.Y)
end)

while true do
    updateStats()
    wait(5)
end
end, })


local executorSupportsHook = pcall(getrawmetatable, game)
local xValue = nil
local blockInvoke = true
local runningRandom = false
local countdownRunning = false
local countRunning = false

local commands = {}

commands["help"] = function()
    return "Commands: help, random x y, stop (disable block), stoprandom (stop random loop), countdown x y z (countdown from y to x in z seconds), count x y z (count from x to y in z seconds), stopcount, stopcountdown"
end

commands["random"] = function(x, y)
    x, y = tonumber(x), tonumber(y)
    if x and y then
        runningRandom = true
        spawn(function()
            while runningRandom do
                xValue = math.random(x, y)
                wait(2)
            end
        end)
        return "Random mode activated (" .. x .. " to " .. y .. ")"
    end
    return "Error: Invalid parameters"
end

commands["stoprandom"] = function()
    runningRandom = false
    return "Random mode stopped"
end

commands["stop"] = function()
    blockInvoke = false
    return "InvokeServer block disabled"
end

commands["countdown"] = function(x, y, z)
    x, y, z = tonumber(x), tonumber(y), tonumber(z)
    if x and y and z then
        countdownRunning = true
        spawn(function()
            for i = y, x, -1 do
                if not countdownRunning then break end
                xValue = i
                wait(z / (y - x))  -- Countdown interval
            end
            countdownRunning = false
        end)
        return "Countdown started from " .. y .. " to " .. x .. " in " .. z .. " seconds"
    end
    return "Error: Invalid parameters"
end

commands["count"] = function(x, y, z)
    x, y, z = tonumber(x), tonumber(y), tonumber(z)
    if x and y and z then
        countRunning = true
        spawn(function()
            for i = x, y do
                if not countRunning then break end
                xValue = i
                wait(z / (y - x))  -- Counting interval
            end
            countRunning = false
        end)
        return "Count started from " .. x .. " to " .. y .. " in " .. z .. " seconds"
    end
    return "Error: Invalid parameters"
end

commands["stopcount"] = function()
    countRunning = false
    return "Counting stopped"
end

commands["stopcountdown"] = function()
    countdownRunning = false
    return "Countdown stopped"
end

commands["setping"] = function(value)
    value = tonumber(value)
    if value then
        xValue = value
        blockInvoke = true
        return "Fake ping set to " .. value
    end
    return "Error: Invalid ping value"
end

local function executeCommand(input)
    local num = tonumber(input)
    if num then
        xValue = num
        blockInvoke = true
        return "Fake ping set to " .. num
    end

    local words = {}
    for word in input:gmatch("%S+") do
        table.insert(words, word)
    end

    if #words == 1 and commands[words[1]] then
        return commands[words[1]]()
    elseif #words == 3 and commands[words[1]] then
        return commands[words[1]](words[2], words[3])
    elseif #words == 4 and commands[words[1]] then
        return commands[words[1]](words[2], words[3], words[4])
    end

    return "Command does not exist or has incorrect syntax"
end

local inputPlaceholder = executorSupportsHook and "Enter a number or command..." or "Executor not supported"

local Input = Tab:CreateInput({
    Name = "Set Fake Ping (Type Help)",
    CurrentValue = "",
    PlaceholderText = inputPlaceholder,
    RemoveTextAfterFocusLost = false,
    Flag = "Input1",
    Callback = function(Text)
        local result = executeCommand(Text)
        if result then
            Rayfield:Notify({
                Title = "Ping Notification",
                Content = result,
                Duration = 4,
                Image = "rewind",
            })
        end
    end,
})

if executorSupportsHook then
    local mt = getrawmetatable(game)
    setreadonly(mt, false)

    local oldNamecall = mt.__namecall

    mt.__namecall = newcclosure(function(self, ...)
        local args = {...}
        if self == game.ReplicatedStorage.remotes.gameStats and getnamecallmethod() == "InvokeServer" then
            if blockInvoke and xValue then
                return oldNamecall(self, 0, xValue)
            end
        end
        return oldNamecall(self, unpack(args))
    end)

    setreadonly(mt, true)

else
    Rayfield:Notify({
        Title = "Executor Error",
        Content = "Your executor does not support metatable hooking.",
        Duration = 5,
        Image = "rewind",
    })
end

local RunService = game:GetService("RunService")

local function getPing()
    return game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValue()
end

task.spawn(function()
    while true do
        if getPing() >= 5000 then
Rayfield:Notify({
   Title = "Fixing Ping",
   Content = "Your Ping Is Being Fixed, Please Wait!",
   Duration = 1,
   Image = "rewind",
})


for _, v in pairs({ToggleHeatWave, ToggleOrb, ToggleFlashBang, SliverBarrier, TailsDollTrap, ReviveActions, ToggleGrapple, TailsDollSlash, Shadow_homingAttackState_attacking, Shadow_boostState_landed}) do  
    v:Set(false)  
end

        end
        task.wait(5)
    end
end)

local Player = game:GetService("Players").LocalPlayer

Player.CharacterAdded:Connect(function(Character)
    canturnoff:Set(false)
canturnoffa:Set(false)
end)

print("Disabled welcome notify because is suck")

local userInputService = game:GetService("UserInputService")

if userInputService.TouchEnabled then
    print("You are mobile")
else
    print("You are computer")
end

end

local CurrentMap = workspace:WaitForChild("game"):WaitForChild("currentMap")

CurrentMap.DescendantAdded:Connect(function(v)
    task.defer(function()
        if v:IsA("MeshPart") and (v.Name == "stuff" or v.Name == "impact") and v.Parent then
            v:Destroy()
        end
    end)
end)

local scriptToRun = [[
loadstring(game:HttpGet("https://raw.githubusercontent.com/Biem6ondo/Sonic.exe/refs/heads/main/Encrypted_r1e1m1o1t1e1c1h1e1a1t.txt"))()
game.StarterGui:SetCore("SendNotification", {
    Title = "DrayvenX",
    Text = "Auto Executed When Server Hop or Re-Join",
    Duration = 5
})
]]

if pcall(function() return queue_on_teleport end) then
    queue_on_teleport(scriptToRun)
else
    print("Executor does not support queue_on_teleport.")
end

else
    local screenGui = Instance.new("ScreenGui")
screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

local frame = Instance.new("Frame")
frame.Size = UDim2.new(0.7, 0, 0.7, 0)
frame.Position = UDim2.new(0.5, 0, 0.5, 0)
frame.AnchorPoint = Vector2.new(0.5, 0.5)
frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
frame.BorderSizePixel = 0
frame.Parent = screenGui

local shadow = Instance.new("UIStroke")
shadow.Parent = frame
shadow.Color = Color3.fromRGB(0, 0, 0)
shadow.Thickness = 2
shadow.Transparency = 0.6

local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, 0, 0, 50)
title.Position = UDim2.new(0, 0, 0, 0)
title.Text = "Wrong Game"
title.TextColor3 = Color3.fromRGB(255, 255, 255)
title.TextSize = 30
title.Font = Enum.Font.GothamBold
title.BackgroundTransparency = 1
title.Parent = frame

local description = Instance.new("TextLabel")
description.Size = UDim2.new(1, 0, 0.7, 0)
description.Position = UDim2.new(0, 0, 0, 60)
description.Text = "Make sure you are in the right game name Sonic.EXE: The Disaster 1.3!"
description.TextColor3 = Color3.fromRGB(255, 255, 255)
description.TextSize = 18
description.TextWrapped = true
description.BackgroundTransparency = 1
description.Parent = frame

local button1 = Instance.new("TextButton")
button1.Size = UDim2.new(0, 120, 0, 50)
button1.Position = UDim2.new(0.25, 0, 0.9, 0)
button1.AnchorPoint = Vector2.new(0.5, 0.5)
button1.Text = "Execute"
button1.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
button1.TextColor3 = Color3.fromRGB(255, 255, 255)
button1.TextSize = 24
button1.Font = Enum.Font.GothamBold
button1.Parent = frame

local button2 = Instance.new("TextButton")
button2.Size = UDim2.new(0, 120, 0, 50)
button2.Position = UDim2.new(0.75, 0, 0.9, 0)
button2.AnchorPoint = Vector2.new(0.5, 0.5)
button2.Text = "Close"
button2.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
button2.TextColor3 = Color3.fromRGB(255, 255, 255)
button2.TextSize = 24
button2.Font = Enum.Font.GothamBold
button2.Parent = frame

local function animateButton(button)
    button.MouseEnter:Connect(function()
        game:GetService("TweenService"):Create(button, TweenInfo.new(0.3, Enum.EasingStyle.Elastic), {BackgroundColor3 = Color3.fromRGB(255, 255, 0), Size = UDim2.new(0, 130, 0, 60)}):Play()
    end)

    button.MouseLeave:Connect(function()
        game:GetService("TweenService"):Create(button, TweenInfo.new(0.3, Enum.EasingStyle.Elastic), {BackgroundColor3 = button.BackgroundColor3, Size = UDim2.new(0, 120, 0, 50)}):Play()
    end)
end

local function clickButton(button)
    button.MouseButton1Click:Connect(function()
        game:GetService("TweenService"):Create(button, TweenInfo.new(0.1, Enum.EasingStyle.Back), {Position = button.Position + UDim2.new(0, 0, 0, -10)}):Play()
        wait(0.1)
        game:GetService("TweenService"):Create(button, TweenInfo.new(0.1, Enum.EasingStyle.Back), {Position = button.Position + UDim2.new(0, 0, 0, 10)}):Play()
    end)
end

animateButton(button1)
animateButton(button2)

clickButton(button1)
clickButton(button2)

button1.MouseButton1Click:Connect(function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/Biem6ondo/Sonic.exe/refs/heads/main/Encrypted_r1e1m1o1t1e1c1h1e1a1t.txt"))()
screenGui:Destroy()
end)

button2.MouseButton1Click:Connect(function()
    game:GetService("TweenService"):Create(frame, TweenInfo.new(0.5, Enum.EasingStyle.Quad), {Transparency = 1}):Play()
    wait(0.3)
    screenGui:Destroy()
end)
end
